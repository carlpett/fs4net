Priotity
========
   * RootedFile.CopyToAndOverwrite(RootedFile)
   * IFileSystem.DirectoryDescribingSpecialFolder(Environment.SpecialFolder)
   * RootedFile.Size()
   * IFileSystem.DirectoryDescribingCurrentDirectory()
   * IFileSystem: PathWasher
   * PathWashers
   * IRootedDirectory.CopyTo(IRootedDirectory) -- and allow target to exist, but be empty
   * RootedDirectory.UniqueDirectory()
   * RootedDirectory.UniqueFileWithoutExtension()
   * RootedDirectory.UniqueFileWithExtension(string)
   * IFileSystem.Drives()

- - - - - - - - - - - - - - - -

Things ToDo
===========

Legend:
  [x] Test and code written
  [?] Needs more tests
  [.] Code written, but no tests
  [ ] Not started


IFileSystem
    [x] DirectoryDescribingTemporaryDirectory
    [.] DirectoryDescribingCurrentDirectory
    [ ] DirectoryDescribingSpecialFolder
    [ ] Drives
    [ ] ? TryCreateXxxDescribing (or IsValidPath())
    [ ] ? InvalidPathChars
    [.] Logger
    [.] PathWasher

IRootedFileSystemItem, RootedFileSystemItemExtensions
    [x] FileSystem
    [x] Drive -- through Drive

IFileSystemItem, FileSystemItemExtensions
    [x] PathAsString { get; }
    [x] AsCanonical();
    [x] Parent
  IFile, FileExtensions
      [x] FileName
    RelativeFile, RelativeFileExtensions
        [x] Creation (FromString)
        [x] Equals, GetHashCode
            Compare canonical: .., ., ending \ etc.
            Drive: are they the same? should ask FileSystem! or not...
    RootedFile, RootedFileExtensions
        [x] Creation
        [x] Creation (WithFileName)
        [x] Equals, GetHashCode
        [x] Exists
        [?] LastAccessTime -- some operations missing...
        [?] LastWriteTime -- some operations missing...
        [ ] CreationTime
        [ ] Attributes (and/or one property for each attribute?)
        [x] Delete
        [x] TryDelete
        [x] CreateReadStream
        [x] CreateWriteStream
        [x] CreateModifyStream
        [x] CreateAppendStream
        [?] CopyTo
        [ ] CopyToAndOverwrite
        [ ] CopyInto -- target is IRootedDirectory
        [ ] CopyIntoAndOverwrite
        [x] MoveTo
        [ ] Size (what is the return type? long or value object?)
        [x] ReadText -- should be far away extension method
        [x] WriteText -- should be far away extension method
        [x] AppendText -- should be far away extension method
  IDirectory, DirectoryExtensions
      [x] LeafFolder
    RelativeDirectory, RelativeDirectoryExtensions
        [x] Creation (FromString)
        [x] Equals, GetHashCode
    RootedDirectory, RootedDirectoryExtensions
        [x] Creation
        [x] Equals, GetHashCode
        [x] Exists
        [?] LastAccessTime -- some operations missing...
        [?] LastWriteTime -- some operations missing...
        [ ] CreationTime
        [ ] Attributes (and/or one property for each attribute?)
        [x] DeleteRecursively
        [x] DeleteIfEmpty
        [x] TryDeleteRecursively
        [x] TryDeleteIfEmpty
        [x] Create
        [.] CopyTo -- in far away extension method
        [x] MoveTo
        [ ] FileSystemItems
        [.] IsEmpty
        [x] Files
        [x] Directories
        [ ] FileSystemItemsRecursive -- in far away extension method
        [ ] FilesRecursive -- in far away extension method
        [ ] DirectoriesRecursive -- in far away extension method
        [ ] Size -- in far away extension method
        [ ] UniqueDirectory
        [ ] UniqueFileWithoutExtension
        [ ] UniqueFileWithExtension
        [ ] IsRoot (or IsDrive?) -- in far away extension method

FileName, FileNameExtensions
    [x] Creation (FromString)
    [x] Creation (FromNameAndExtension)
    [x] Creation (From RelativeFile)
    [x] Creation (From RootedFile)
    [ ] Creation: ChangeName()
    [ ] Creation: ChangeExtension()
    [ ] Creation: AppendExtension() (for eg "file.tar".AppendExtension(".gz") => "file.tar.gz"
    [x] Equals, GetHashCode
    [x] FullName
    [x] Extension
    [x] Name

Drive
    [x] Creation (FromString)
    [x] Equals, GetHashCode
    [x] Name
	[ ] AvailableFreeSpace
	[ ] TotalFreeSpace
	[ ] TotalSize
	[ ] Type (DriveType enum)
	[ ] IsReady
	[ ] VolumeLabel

operators...
  [x] RootedDirectory + RelativeFile => RootedFile
  [x] RootedDirectory + RelativeDirectory => RootedDirectory
  [x] RelativeDirectory + RelativeFile => RelativeFile
  [x] RelativeDirectory + RelativeDirectory => RelativeDirectory
  [x] Drive + RelativeDirectory => RootedDirectory
  [x] Drive + RelativeFile => RootedFile

named...
  [x] RootedDirectory.RelativeFrom RootedDirectory => RelativeDirectory
  [x] RootedFile.RelativeFrom RootedDirectory => RelativeFile

PathWashers...
  [.] NullWasher
  [ ] RemoveEndingBackslashWasher (only for directories?)
  [ ] TrimSpacesWasher
  [ ] RemoveIllegalSpacesWasher
  [ ] ReplaceSlashWithBackslashWasher
  [ ] RemoveMultipleBackslashesWasher
  [ ] ReplaceIllegalPathCharsWasher (specify replacement char)
  [ ] ReplaceCharWasher (specify from and to)


TODO: Access Denied on most operations -- enough to fake it in one way, e.g. making it read-only
TODO: Open two streams from same file. Also reference counting on open.
TODO: More stream tests... length, position, flush.
TODO: Let MemoryFileSystem.Dispose() verify that all streams are disposed.
TODO: Equals() on Windows file system is case insensitive!
TODO: Equals() is not tested, only GetHashCode()... what to do about that?
TODO: Introduce constant: FolderSeparator
TODO: Documentation, especially exceptions
TODO: Created, Access, Modified in MoveTo() and CopyTo()



---------- Ubiquitous Language!

(NEEDS TO BE UPDATED)

c:\my\path\to
c:\my\path\to\file.txt

Directory, DirectoryPath: c:\my\path\to, c:\my\path\to\
Extension: txt
File: file.txt
Filename: file.txt
FilenameWithoutExtension: file
FilePath: c:\my\path\to\file.txt
Folder: c:, my, path, to
Path, FullPath: DirectoryPath or FilePath
FileSystemItem: 
